;; Object ORG/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "ORG/"
  :tables (list 
   (semanticdb-table "OS2.html"
    :major-mode 'html-mode
    :tags 
        '( ("OS2" section nil nil [240 2247])
            ("/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2013 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = \"code-highlighted\";
     elem.className   = \"code-highlighted\";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->" section nil nil [2247 3867])
            ("OS2" section (:members 
              ( ("OS2" section (:members 
                  ( ("Table of Contents" section (:members 
                      ( ("1 synchronization mechanisms - know the semantics and uses of semaphores, monitors and pthread mutex+condition variables" anchor nil nil [4051 4054])
                        ("1.1 Definition" anchor nil nil [4202 4205])
                        ("1.1.1 Semaphore" anchor nil nil [4249 4252])
                        ("1.1.2 Monitor" anchor nil nil [4299 4302])
                        ("1.2 Semaphores" anchor nil nil [4359 4362])
                        ("1.2.1 Definition: \"A semaphore S is an integer variable that, apart from initialization, is accessed only through two sandard atomic operations: wait() and signal(). The wait() operation was originall termed P; signal() was originally called V." anchor nil nil [4406 4409])
                        ("1.2.2 Definition Of wait()" anchor nil nil [4685 4688])
                        ("1.2.3 Definition Of signal()" anchor nil nil [4746 4749])
                        ("1.2.4 All modifications to the integer value of the semaphore in the wait() and signal() operations must be executed indivisibly. That is, when one process modifies the semaphore value, no other process can simultaneously modify that same semaphore value." anchor nil nil [4809 4812])
                        ("1.2.5 Semaphore Usage" anchor nil nil [5099 5102])
                        ("1.2.6 Implementation" anchor nil nil [5155 5158])
                        ("1.3 Monitors" anchor nil nil [5222 5225])
                        ("1.3.1 Definition:" anchor nil nil [5267 5270])
                        ("1.3.2 The Condition" anchor nil nil [5319 5322])
                        ("1.3.3 Possibilities" anchor nil nil [5373 5376])
                        ("1.3.4 Code" anchor nil nil [5427 5430])
                        ("1.4 Pthread mutex + condition variables" anchor nil nil [5484 5487])
                        ("1.4.1 The simplest of the synch mechanism tools is the pthread mutex lock. We use the mutex lock to protect critical regions and to prevent race conditions. A process needs to acquire the lock before entering a critical section; it releases the lock when it exits the critical section." anchor nil nil [5556 5559])
                        ("1.4.2 The pthread<sub>mutex" anchor nil nil [5876 5879])
                        ("1.4.3 A process must acquire the lock before entering a critical section; it releases the lock when it exits the critical section." anchor nil nil [6188 6191])
                        ("1.4.4 Calls to either acquire() or release() must be performed atomically." anchor nil nil [6353 6356])
                        ("1.4.5 Spinlocks" anchor nil nil [6462 6465])
                        ("1.4.6 Implementation" anchor nil nil [6512 6515])
                        ("1.5 Extra:" anchor nil nil [6579 6582])
                        ("1.5.1 Implementing a Monitor using Semaphores" anchor nil nil [6622 6625])
                        ("1.5.2 Resuming processes within a Monitor" anchor nil nil [6702 6705])
                        ("2 synchronization problems - know solutions using semaphores, monitors, pthread mutex+condition variables" anchor nil nil [6801 6804])
                        ("2.1 Bounded Buffer Producer/Consumer" anchor nil nil [6937 6940])
                        ("2.1.1 Semaphores" anchor nil nil [7006 7009])
                        ("2.1.2 Monitors" anchor nil nil [7057 7060])
                        ("2.1.3 Pthread mutex + Condition Variables" anchor nil nil [7106 7109])
                        ("2.2 Reader/Writers" anchor nil nil [7194 7197])
                        ("2.2.1 Problem:" anchor nil nil [7245 7248])
                        ("2.2.2 Solutions:" anchor nil nil [7294 7297])
                        ("2.2.3 Semaphores" anchor nil nil [7345 7348])
                        ("2.2.4 Monitors" anchor nil nil [7396 7399])
                        ("2.2.5 Pthread Mutex + Condition Variables" anchor nil nil [7445 7448])
                        ("2.3 Dining Philosophers" anchor nil nil [7533 7536])
                        ("2.3.1 Problem:" anchor nil nil [7589 7592])
                        ("2.3.2 Solution Using Monitors:" anchor nil nil [7638 7641])
                        ("2.3.3 Semaphores" anchor nil nil [7703 7706])
                        ("2.3.4 Monitors" anchor nil nil [7754 7757])
                        ("2.3.5 Pthread Mutex + Condition Variables" anchor nil nil [7803 7806])
                        ("3 Deadlocks - definition, prevention (4 neccessary conditions), avoidance, detection, resource allocation graphs" anchor nil nil [7902 7905])
                        ("3.1 Four Necessary Conditions:" anchor nil nil [8045 8048])
                        ("3.1.1 A deadlock situation can arise if the following four conditions hold simultaneously in a system. In other words, if even one of the below conditions cannot hold in the system, a deadlock is impossible." anchor nil nil [8108 8111])
                        ("3.1.2 Mutual exclusion:" anchor nil nil [8350 8353])
                        ("3.1.3 Hold and wait:" anchor nil nil [8408 8411])
                        ("3.1.4 No preemption:" anchor nil nil [8463 8466])
                        ("3.1.5 Circular wait:" anchor nil nil [8518 8521])
                        ("3.2 Definition:" anchor nil nil [8585 8588])
                        ("3.2.1 \"We say that a set of processes is in a deadlocked state when every process in the set is waiting for an event that can be caused only by another process in the set." anchor nil nil [8633 8636])
                        ("3.2.2 When a process requests resources but those resources aren’t available at the time, the requesting process goes into waiting state. Sometimes the resources requested never become available because of other processes holding those resources up. This situation is called deadlock." anchor nil nil [8839 8842])
                        ("3.3 Prevention (4 neccessary conditions):" anchor nil nil [9170 9173])
                        ("3.3.1 A deadlock situation can arise if the following four conditions hold simultaneously in a system. In other words, if even one of the below conditions cannot hold in the system, a deadlock is impossible." anchor nil nil [9244 9247])
                        ("3.3.2 Deadlock prevention:" anchor nil nil [9486 9489])
                        ("3.4 Avoidance" anchor nil nil [9559 9562])
                        ("3.4.1 Be sure to test allocation requests made by the processes before assigning even if the resources are available. The first method is resource allocation graphs visually show which resources are required by which process and make sure that no process will be waiting for an excess amount of time. The second method is Banker’s algorithm. When a new process enters the system, it must declare the maximum number of instances of each resource type that it may need. This number may not exceed the total number of resources in the system. When a user requests a set of resources, the system must determine whether the allocation of these resources will leave the system in a safe state. If it will, the resources are allocated; otherwise, the process must wait until some other process releases enough resources." anchor nil nil [9605 9608])
                        ("3.5 Detection:" anchor nil nil [10465 10468])
                        ("3.5.1 When a deadlock situation does occur, the system may provide an algorithm that examines the state of the system to determine whether a deadlock has occurred and/or an algorithm to recover from the deadlock." anchor nil nil [10512 10515])
                        ("4 Relocation - static and dynamic (base + limit regs)" anchor nil nil [10782 10785])
                        ("4.1 The first physical address of a process is the base address and the largest  physical address the process can access is the limit address." anchor nil nil [10876 10879])
                        ("4.2 The base address is alsko known as the relocation address, and may be kept in a special register." anchor nil nil [11051 11054])
                        ("4.1 Static Relocation" anchor nil nil [11197 11200])
                        ("4.1.1 At load time, the OS adjusts the addresses in a process to reflect its position in memory." anchor nil nil [11251 11254])
                        ("4.1.2 Once a process is assigned a place in memory and starts executing it, the OS cannot move it." anchor nil nil [11382 11385])
                        ("4.1.3 Once a process is assigned a place in memory, and starts executing it, the OS cannot move it." anchor nil nil [11515 11518])
                        ("4.2 Dynamic Relocation" anchor nil nil [11661 11664])
                        ("4.2.1 Hardware adds relocation register (base) to virtual address to get a physical address." anchor nil nil [11716 11719])
                        ("4.2.2 Hardware compares address with limit register; address must be less than base." anchor nil nil [11843 11846])
                        ("4.2.3 If test fails, the processor takes an address trap and ignores the physical address." anchor nil nil [11962 11965])
                        ("4.2.4 Advantages:" anchor nil nil [12087 12090])
                        ("4.2.5 Disadvantages:" anchor nil nil [12139 12142])
                        ("4.2.6 Goals of Dynamic Relocation:" anchor nil nil [12194 12197])
                        ("5 Fixed and variable-size partitions (MFT and MVT) - issues (holes) and solutions (compaction)" anchor nil nil [12286 12289])
                        ("5.1 MFT:" anchor nil nil [12411 12414])
                        ("5.1.1 Now we are ready to turn to memory allocation. One of the simplest methods for allocating memory is to divide memory into several fixed-sized partitions. Each partition may contain exactly one process. Thus, the degree of multiprogramming is bound by the number of partitions. In this multiple- partition method, when a partition is free, a process is selected from the input queue and is loaded into the free partition. When the process terminates, the partition becomes available for another process." anchor nil nil [12452 12455])
                        ("5.2 MVT:" anchor nil nil [13007 13010])
                        ("5.2.1 In the variable-partition scheme, the operating system keeps a table indicating which parts of memory are available and which are occupied. Initially, all memory is available for user processes and is considered one large block of available memory, a hole. Eventually, as you will see, memory contains a set of holes of various sizes." anchor nil nil [13048 13051])
                        ("5.2.2 As processes enter the system, they are put into an input queue. The operating system takes into account the memory requirements of each process and the amount of available memory space in determining which processes are allocated memory. When a process is allocated space, it is loaded into memory, and it can then compete for CPU time. When a process terminates, it releases its memory, which the operating system may then fill with another process from the input queue." anchor nil nil [13423 13426])
                        ("5.2.3 At any given time, then, we have a list of available block sizes and an input queue. The operating system can order the input queue according to a scheduling algorithm. Memory is allocated to processes until, finally, the memory requirements of the next process cannot be satisfied—that is, no available block of memory (or hole) is large enough to hold that process. The operating system can then wait until a large enough block is available, or it can skip down the input queue to see whether the smaller memory requirements of some other process can be met." anchor nil nil [13936 13939])
                        ("5.2.4" anchor nil nil [14537 14540])
                        ("5.3 Issues (holes):" anchor nil nil [14590 14593])
                        ("5.3.1 Definition" anchor nil nil [14642 14645])
                        ("5.3.2 This procedure is a particular instance of the general dynamic storage- allocation problem, which concerns how to satisfy a request of size n from a list of free holes." anchor nil nil [14693 14696])
                        ("5.4 Solutions (compaction):" anchor nil nil [14914 14917])
                        ("5.4.1 There are many solutions to this problem. The first-fit, best-fit, and worst-fit strategies are the ones most commonly used to select a free hole from the set of available holes." anchor nil nil [14974 14977])
                        ("5.4.2 First fit" anchor nil nil [15193 15196])
                        ("5.4.3 Best fit" anchor nil nil [15243 15246])
                        ("5.4.4 Worst fit" anchor nil nil [15292 15295])
                        ("5.4.5 Simulations have shown that both first fit and best fit are better than worst fit in terms of decreasing time and storage utilization. Neither first fit nor best fit is clearly better than the other in terms of storage utilization, but first fit is generally faster." anchor nil nil [15342 15345])
                        ("6 Swapping - what is it and why it's done" anchor nil nil [15672 15675])
                        ("6.1 A process must be in memory to be executed. A process, however, can be swapped temporarily out of memory to a backing store and then brought back into memory for continued execution. Swapping makes it possible for the total physical address space of all processes to exceed the real physical memory of the system, thus increasing the degree of multiprogramming in a system." anchor nil nil [15744 15747])
                        ("7 Paging" anchor nil nil [16166 16169])
                        ("7.1 Intro to Paging:" anchor nil nil [16205 16208])
                        ("7.1.1 One of the memory-management schemes by which a computer can store and retrieve data from secondary storage for use in main memory. It allows for the physical address space of a process to be non-contiguous. It avoids external fragmentation (when free memory is separated into small blocks and is interspersed by allocated memory) and the need for compaction." anchor nil nil [16258 16261])
                        ("7.2 Address translation (pages and frames with page table)" anchor nil nil [16670 16673])
                        ("7.2.1 Every address generated by the CPU is divided into two parts: a page number (p) and a page offset (d). The page number is used as an index into a page table. The page table contains the base address of each page in physical memory. This base address is combined with the page offset to deﬁne the physical memory address that is sent to the memory unit. The size of a page is a power of 2. If the size of the logical address space is 2m, and a page size is 2n bytes, then the high-order m−n bits of a logical address designate the page number, and the n low-order bits designate the page offset." anchor nil nil [16761 16764])
                        ("7.3 Relationships between page size, logical address (pointer) size, page table size, physical address size" anchor nil nil [17408 17411])
                        ("7.3.1 # of logical address = # of entries in page table <sup>2" anchor nil nil [17548 17551])
                        ("7.3.2 physical memory bytes = (# of entries in page table *2) * # of entries in page table" anchor nil nil [17651 17654])
                        ("7.3.3 2<sup>p" anchor nil nil [17776 17779])
                        ("7.3.4 2<sup>d" anchor nil nil [17899 17902])
                        ("8 Implementing paging -" anchor nil nil [18021 18024])
                        ("8.1 Unfinished" anchor nil nil [18075 18078])
                        ("8.2 Using associative registers:" anchor nil nil [18122 18125])
                        ("8.2.1 A set of associative registers are built of high speed memory. Unlike primary memory, associative memories can be searched by contents rather than by addresses." anchor nil nil [18187 18190])
                        ("8.2.2 Each register consists of two parts: a key and a value." anchor nil nil [18388 18391])
                        ("8.2.3 Associative memory contains only a part of PMT. \"Re page entries maintained in this PMT correspond to the most recently referenced pages only using the heuristic that a page referenced recently in the past is likely to be referenced again in the future." anchor nil nil [18484 18487])
                        ("8.3 Address translation with TLB:" anchor nil nil [18790 18793])
                        ("8.3.1 TLB( Transition Look-aside Buffer)" anchor nil nil [18856 18859])
                        ("8.4 Hierarchical paging (2-level paging):" anchor nil nil [18943 18946])
                        ("8.4.1 Known as Multilevel Paging." anchor nil nil [19017 19020])
                        ("8.4.2 The page table might be too big to fit in a contiguous space, so we may have a hierarchy with several levels." anchor nil nil [19085 19088])
                        ("8.4.3 Break up the logical address space into multiple page tables." anchor nil nil [19235 19238])
                        ("8.4.4 A simple technique is a two-level page table, three level page table." anchor nil nil [19337 19340])
                        ("8.4.5 The main concept behind it is paging the page table. For example, if a logical address is divided into a 20 bit page number and a 12 bit page offset, the 20 bit page number would be further divided since the page table is being “paged” and the result is two 10 bit page numbers and a 12 bit page offset." anchor nil nil [19447 19450])
                        ("8.5 Hashed Page tables" anchor nil nil [19803 19806])
                        ("8.5.1 Common in address spaces &gt; 32 bits." anchor nil nil [19858 19861])
                        ("8.5.2 The virtual page number is hashed into a page table. This page table contains a chain of elements hashing to the same location." anchor nil nil [19937 19940])
                        ("8.5.3 Each element consists of three fields:" anchor nil nil [20105 20108])
                        ("8.5.4 Virtual page numbers are compared in this chain searching for a match. If a match is found, the corresponding physical frame is extracted." anchor nil nil [20184 20187])
                        ("8.6 Inverted page table:" anchor nil nil [20375 20378])
                        ("8.6.1 The inverted page table (IPT) combines a page table and a frame table into one data structure. *** One entry for each virtual page number &amp; real page of memory." anchor nil nil [20432 20435])
                        ("8.6.2 Entry consists of the virtual address of the page stored in that real memory location, with information about the process that owns that page." anchor nil nil [20637 20640])
                        ("8.6.3 Decreases memory needed to store each page table, but increases time needed to search the table when a page reference occurs." anchor nil nil [20820 20823])
                        ("8.6.4 Use hash table to limit the search to one &ndash; or at most a few &ndash; page-table entries." anchor nil nil [20986 20989])
                        ("8.7 Segmented paging" anchor nil nil [21133 21136])
                        ("8.7.1 It is possible to combine segmentation and paging by dividing each segment into pages." anchor nil nil [21186 21189])
                        ("8.7.2 In systems that combine them, virtual memory is usually implemented with paging, with segmentation used to provide memory protection." anchor nil nil [21313 21316])
                        ("8.7.3 The virtual address space is treated as a collection of segments of arbitrary sizes, and the physical memory is treated as a sequence of fixed size page frames." anchor nil nil [21487 21490])
                        ("8.7.4 Segmented paging can improve process startup time since it is clear which segments need to be loaded first in order to begin running code." anchor nil nil [21688 21691])
                        ("8.7.5 Segmented paging also allow for simpler growth because it can be done per segment." anchor nil nil [21867 21870])
                        ("9 Segmentation -" anchor nil nil [22013 22016])
                        ("9.1 View of Logical Address Space:" anchor nil nil [22060 22063])
                        ("9.1.1 A logical address space is a collection of segments." anchor nil nil [22127 22130])
                        ("9.1.2 Each segment has a name and a length." anchor nil nil [22220 22223])
                        ("9.1.3 The addresses specify both the segment name and the offset within the segment." anchor nil nil [22298 22301])
                        ("9.1.4 The programmer therefore specifies each address by two quantities: a segment name and an offset." anchor nil nil [22417 22420])
                        ("9.1.5 For simplicity of implementation, segments are numbered and are referred to by a segment number, rather than by a segment name. Thus, a logical address consists of a two tuple: &lt;segment-number, offset&gt;." anchor nil nil [22554 22557])
                        ("9.1.6 Example  Suppose we have a logical and physical address size of 24 bits, with a page size of 2K.  How many bits are there in a page number? in an offset?  How many entries are there in a page table?" anchor nil nil [22803 22806])
                        ("9.1.7 In general, if a logical address is n bits and the page size is 2m , we have" anchor nil nil [23042 23045])
                        ("9.1.8 •     the logical address space is 2n bytes" anchor nil nil [23159 23162])
                        ("9.1.9 •     the logical address space contains 2n-m pages" anchor nil nil [23243 23246])
                        ("9.1.10 •     page number is n-m bits, offset is m bits" anchor nil nil [23335 23338])
                        ("9.1.11 •     the page table contains 2n-m entries" anchor nil nil [23425 23428])
                        ("9.1.12 Paging greatly simplifies the management of physical memory by the operating system.  Memory can be viewed as an array of pages.  It can be managed using a frame table; each frame is either free, or allocated to some address space.  Paging eliminates the external fragmentation problem, but is still subject to internal fragmentation." anchor nil nil [23510 23513])
                        ("9.2 Use of Segment Table For Address Translation (with/without TLB):" anchor nil nil [23899 23902])
                        ("10 Memory Hierachy" anchor nil nil [24012 24015])
                        ("10.1 There are 4 major storage levels:" anchor nil nil [24062 24065])
                        ("10.1.1 Internal – Processor registers and cache" anchor nil nil [24134 24137])
                        ("10.1.2 Main – the system RAM and controller cards" anchor nil nil [24217 24220])
                        ("10.1.3 On-line mass storage – secondary storage (auxiliary storage)" anchor nil nil [24302 24305])
                        ("10.1.4 Off-line bulk storage – tertiary and off-line storage" anchor nil nil [24405 24408])
                        ("11 Virtual Memory:" anchor nil nil [24524 24527])
                        ("11.1 Definition:" anchor nil nil [24574 24577])
                        ("11.1.1 Virtual memory is a system by which the machine or operating system fools processes running on the machine into thinking that they have a lot more memory to work with than the capacity of RAM would indicate. It does this by storing the most recently used items in RAM, and storing the lesser used items in the slower disk memory, and interchanging data between the two whenever a disk is made. In this way, memory appears to programs to be a full 32 bit address space, when in fact memory space is probably only a mere fraction of that" anchor nil nil [24624 24627])
                        ("11.2 Demand paging:" anchor nil nil [25214 25217])
                        ("11.2.1 Demand paging is a method of virtual memory management. In a system that uses demand paging, the operating system copies a disk page into physical memory only if an attempt is made to access it. It follows that a process begins execution with non of its pages in physical memory, and many page faults will occur until most of a process’s working set of pages is located in physical memory. Demand paging follows that pages should only be brought into memory if the executing process demands them." anchor nil nil [25267 25270])
                        ("11.3 Valid bit:" anchor nil nil [25818 25821])
                        ("11.3.1 The valid bit tells us if the memory is currently in main memory or if it must be retrieved from secondary memory. When a page is taken from disk and put into main memory, the valid bit is set to 1. When a page is overwritten in main memory once the system feels we no longer need it, the valid bit is set to 0." anchor nil nil [25867 25870])
                        ("12 Page Replacement" anchor nil nil [26244 26247])
                        ("12.1 Dirty bit:" anchor nil nil [26295 26298])
                        ("12.1.1 Also known as a Modify Bit, set by the hardware whenever any byte in the page is written into.  Indicates whether the contents of a page have been modified since the page was last loaded into main memory.  If a page has not been modified, the page does not have to be written to disk before the page frame can be reused." anchor nil nil [26344 26347])
                        ("12.2 Reference Bit:" anchor nil nil [26719 26722])
                        ("12.2.1 Set by the hardware whenever that page is referenced (either a read or a write to any byte in the page).  Associated with each entry in the page table.  It's cleared by the OS and can be used to approximate LRU page replacement." anchor nil nil [26772 26775])
                        ("12.3 Algorithms" anchor nil nil [27055 27058])
                        ("12.3.1 FIFO:" anchor nil nil [27104 27107])
                        ("12.3.2 OPT:" anchor nil nil [27152 27155])
                        ("12.3.3 LRU:" anchor nil nil [27199 27202])
                        ("13 Frame allocation:" anchor nil nil [27269 27272])
                        ("13.1 Problem:" anchor nil nil [27321 27324])
                        ("13.1.1 We turn next to the issue of allocation. How do we allocate the fixed amount of free memory among the various processes? If we have 93 free frames and two processes, how many frames does each process get?" anchor nil nil [27368 27371])
                        ("13.2 Solution:" anchor nil nil [27627 27630])
                        ("13.2.1 The simplest case is the single-user system. Consider a single-user system with 128 KB of memory composed of pages 1 KB in size. This system has 128 frames. The operating system may take 35 KB, leaving 93 frames for the user process. Under pure demand paging, all 93 frames would initially be put on the free-frame list. When a user process started execution, it would generate a sequence of page faults. The first 93 page faults would all get free frames from the free-frame list. When the free-frame list was exhausted, a page-replacement algorithm would be used to select one of the 93 in-memory pages to be replaced with the 94th, and so on. When the process terminated, the 93 frames would once again be placed on the free-frame list." anchor nil nil [27675 27678])
                        ("13.3 Variations to Solution:" anchor nil nil [28469 28472])
                        ("13.3.1 There are many variations on this simple strategy. We can require that the operating system allocate all its buffer and table space from the free-frame list. When this space is not in use by the operating system, it can be used to support user paging. We can try to keep three free frames reserved on the free-frame list at all times. Thus, when a page fault occurs, there is a free frame available to page into. While the page swap is taking place, a replacement can be selected, which is then written to the disk as the user process continues to execute. Other variants are also possible, but the basic strategy is clear: the user process is allocated any free frame." anchor nil nil [28531 28534])
                        ("13.4 Useful Snippets to Know:" anchor nil nil [29255 29258])
                        ("13.4.1 Allocation Algorithms:" anchor nil nil [29318 29321])
                        ("13.4.2 Our strategies for the allocation of frames are constrained in various ways. We cannot, for example, allocate more than the total number of available frames (unless there is page sharing). We must also allocate at least a minimum number of frames." anchor nil nil [29383 29386])
                        ("13.5 Relationship to Page Fault Rate" anchor nil nil [29685 29688])
                        ("13.5.1 There is a direct relationship between the working set of a process and its page-fault rate. Typically, as shown in Figure 9.20, the working set of a process changes over time as references to data and code sections move from one locality to another. Assuming there is sufficient memory to store the working set of a process (that is, the process is not thrashing), the page-fault rate of the process will transition between peaks and valleys over time. This general behavior is shown below:" anchor nil nil [29755 29758])
                        ("13.5.2 A peak in the page-fault rate occurs when we begin demand-paging a new locality. However, once the working set of this new locality is in memory, the page-fault rate falls. When the process moves to a new working set, the page-fault rate rises toward a peak once again, returning to a lower rate once the new working set is loaded into memory. The span of time between the start of one peak and the start of the next peak represents the transition from one working set to another." anchor nil nil [30289 30292])
                        ("13.5.3 Page fault frequency takes a more direct approach to thrashing." anchor nil nil [30812 30815])
                        ("13.5.4 The specific problem is how to prevent thrashing. Thrashing has a high page-fault rate. Thus, we want to control the page-fault rate. When it is too high, we know that the process needs more frames. Conversely, if the page-fault rate is too low, then the process may have too many frames. We can establish upper and lower bounds on the desired page-fault rate (Figure 9.21). If the actual page-fault rate exceeds the upper limit, we allocate the process another frame. If the page-fault rate falls below the lower limit, we remove a frame from the process. Thus, we can directly measure and control the page-fault rate to prevent thrashing." anchor nil nil [30918 30921])
                        ("13.5.5 A page fault (sometimes #pf or pf) is a trap to the software raised by the hardware when a program accesses a page that is mapped in the virtual address space, but not loaded in physical memory. In the typical case the operating system tries to handle the page fault by making the required page accessible at a location in physical memory or terminates the program in the case of an illegal access. The hardware that detects a page fault is the memory management unit in a processor. The exception handling software that handles the page fault is generally part of the operating system." anchor nil nil [31601 31604])
                        ("13.5.6 There is a direct relationship between the working set of a process and its page-fault rate. Typically, the working set of a process changes over time as references to data and code sections move from one locality to another. Assuming there is sufficient memory store the working set of a process (that is, the process is not thrashing), the page-fault rate of the process will transition between peaks and valleys over time." anchor nil nil [32230 32233])
                        ("13.5.7 A peak in the page-fault rate occurs when we begin demand-paging a new locality. However, once the working set of this new locality is in memory, the page-fault rate falls. When the process moves to a new working set, the new working set is loaded into memory. The span of time between the start of one peak and the start of the new peak represents the transition from one working set to another." anchor nil nil [32698 32701])
                        ("13.6 Relationship to Working Sets" anchor nil nil [33149 33152])
                        ("13.6.1 The working-set model is based on the assumption of locality. This model uses a parameter, 'triangle', to define the working-set window. The idea is to examine the most recent 'triangle' page references. The set of pages in the most recent 'triangle' page reference is the working set. If a page is in active use, it will be in the working set 'triangle' time units after its last reference. Thus, the working set is an approximation of the program's locality." anchor nil nil [33216 33219])
                        ("13.6.2 The accuracy of the working set depends on the selection of 'triangle'. If 'triangle' is too small, it will not encompass the entire locality; if 'triangle' is too large, it may overlap several localities. In the extreme, if 'triangle' is infinite, the working set is the set of pages touched during the process execution." anchor nil nil [33719 33722])
                        ("13.6.3 Once has been selected, use of the working-set model is simple. The operating system monitors the working set of each process and allocates to page reference table that working set enough frames to provide it with its working-set size. If there are enough extra frames, another process can be initiated. If the sum of the working-set sizes increases, exceeding the total number of available frames, the operating system selects a process to suspend. The process's pages are written out (swapped), and its frames are reallocated to other processes. The suspended process can be restarted later." anchor nil nil [34084 34087])
                        ("13.6.4 This working-set strategy prevents thrashing while keeping the degree of multiprogramming as high as possible. Thus, it optimizes CPU utilization. The difficulty with the working-set model is keeping track of the working set. The working-set window is a moving window. At each memory reference, a new reference appears at one end, and the oldest reference drops off the other end. A page is in the working set if it is referenced anywhere in the working-set window." anchor nil nil [34720 34723])
                        ("13.7 Relationship to Equal or Proportional Allocation" anchor nil nil [35240 35243])
                        ("13.7.1 Equal allocation – the easiest way to split ‘m’ frames among ‘n’ processes is to give everyone an equal share, m/n frames (ignoring frames needed by the operating system for the moment). For instance, if there are 93 frames and 5 processes, each process will get 18 frames. The three leftover frames can be used as a free-frame buffer pool." anchor nil nil [35327 35330])
                        ("13.7.2 Proportional allocation- an alternative to equal allocation is to recognize that various processes will need differing amounts of memory. Consider a system with a 1-KB frame size. If a small student process of 10KB and an interactive database of 127KB are the only two processes running in a system with 62 free frames, it does not make much sense to give each process 31 frames. The student process does no need more than 10 frames, so the other 21 are, strictly speaking, wasted." anchor nil nil [35710 35713])
                        ("13.7.3 To solve this problem, we can use proportional allocation, in which we allocate available memory to each process according to its size. .Let the size of the virtual memory for process p[i] be s[i], and deﬁne S =∑s[i]. Then, if the total number of available frames is m, we allocate a[i] frames to process p[i], where a[i] is approximately a[i] = s[i]/S×m. Of course, we must adjust each a[i] to be an integer that is greater than the minimum number of frames required by the instruction set, with a sum not exceeding m. With proportional allocation, we would split 62 frames between two processes, one of 10 pages and one of 127 pages, by allocating 4 frames and 57 frames, respectively, since 10/137×62≈4, and 127/137×62≈57." anchor nil nil [36234 36237])
                        ("13.7.4 In this way, both processes share the available frames according to their “needs,” rather than equally. In both equal and proportional allocation, of course, the allocation may varyaccordingtothemultiprogramminglevel.Ifthemultiprogramminglevel is increased, each process will lose some frames to provide the memory needed for the new process. Conversely, if the multi programming level decreases, the frames that were allocated to the departed process can be spread over the remaining processes." anchor nil nil [37002 37005])
                        ("13.8 Relationship to Thrashing" anchor nil nil [37552 37555])
                        ("13.8.1 Explain Thrashing:" anchor nil nil [37616 37619])
                        ("13.8.2 Cause of Thrashing:" anchor nil nil [37677 37680])
                        ("13.8.3 Limiting the effects of Thrashing:" anchor nil nil [37739 37742])
                        ("13.8.4 Preventing Thrashing" anchor nil nil [37816 37819])
                        ("13.9 Concluding Remarks on Frame Allocation" anchor nil nil [37891 37894])
                        ("13.9.1 Practically speaking, thrashing and the resulting swapping have a disagreeably large impact on performance. The current best practice in implementing a computer facility is to include enough physical memory, whenever possible, to avoid thrashing and swapping. From smartphones through mainframes, providing enough memory to keep all working sets in memory concurrently, except under extreme conditions, gives the best user experience." anchor nil nil [37968 37971])
                        ("14 Important Definitions" anchor nil nil [38468 38471])
                        ("14.1 Race Condition:" anchor nil nil [38524 38527])
                        ("14.1.1 \"A situation like this, where several processes access and manipulate the variable counter concurrently. A situation like this, where several processes access and manipulate the same data concurrently and the outcome of the execution depends on the aprticular order in which the access takes place, is called a race condition.\"" anchor nil nil [38578 38581])
                        ("14.2 Critical Section Problem:" anchor nil nil [38960 38963])
                        ("14.2.1 \"is to design a protocol that the processes can use to cooperate. Each process must request permission to enter its critical section. The section of code implementing this may be folloewd by an exit section. The reamining code is the remainder section.\"" anchor nil nil [39024 39027])
                        ("14.2.2 A solution to the critical-section problem must satisfy the following three requirements." anchor nil nil [39320 39323])
                        ("14.3 General Approaches to Critical Sections in Operating Systems:" anchor nil nil [39464 39467])
                        ("14.3.1 Two general approaches are used to handle critical sections in operating systems: preemptive kernels and nonpreemptive kernels. A preemptive kernel allows a process to be preempted while it is running in kernel mode. A nonpreemptive kernel does not allow a process running in kernel mode to be preempted; a kernel-mode process will run until it exits kernel mode, blocks, or voluntarily yields control of the CPU." anchor nil nil [39564 39567])
                        ("14.4 Busy Waiting" anchor nil nil [40032 40035])
                        ("14.4.1 When waiting thread is still active, but it's not actually accomplishing anything. It's busy in the sense that the thread is still executed by the processor, even though the thread is doing nothing but waiting for the second thread to finish." anchor nil nil [40083 40086])
                        ("15 Subjects From Last Midterm" anchor nil nil [40391 40394])
                        ("15.1 Multiprogramming" anchor nil nil [40452 40455])
                        ("15.1.1 Definitions" anchor nil nil [40507 40510])
                        ("15.1.2 I/O Bound vs CPU Bound Processes" anchor nil nil [40561 40564])
                        ("15.1.3 Interrupts" anchor nil nil [40636 40639])
                        ("15.1.4 Overlap I/O and CPU Usage" anchor nil nil [40689 40692])
                        ("15.1.5 Machine Modes (Mode Bit)" anchor nil nil [40757 40760])
                        ("15.1.6 Timers" anchor nil nil [40824 40827])
                        ("15.2 OS services and structure" anchor nil nil [40885 40888])
                        ("15.2.1 Types of System Calls" anchor nil nil [40949 40952])
                        ("15.2.2 System Call Implementation" anchor nil nil [41013 41016])
                        ("15.2.3 Virtual Machines" anchor nil nil [41082 41085])
                        ("15.2.4 How And When Is The Os Code Actually Executed" anchor nil nil [41141 41144])
                        ("15.3 Processes" anchor nil nil [41241 41244])
                        ("15.3.1 Definition" anchor nil nil [41289 41292])
                        ("15.3.2 Process State" anchor nil nil [41342 41345])
                        ("15.3.3 Process Creation (Fork(), Heiarchy, Termination)" anchor nil nil [41398 41401])
                        ("15.4 CPU Scheduling" anchor nil nil [41501 41504])
                        ("15.4.1 CPU Burst Distribution" anchor nil nil [41554 41557])
                        ("15.4.2 Process Descriptors (aka PCBS)" anchor nil nil [41619 41622])
                        ("15.4.3 Scheduling Queues: Ready Queue, Device Queues" anchor nil nil [41692 41695])
                        ("15.4.4 Long-term vs. Short-term Scheduling" anchor nil nil [41780 41783])
                        ("15.4.5 Job Mix" anchor nil nil [41858 41861])
                        ("15.4.6 Degree Of Multiprogramming" anchor nil nil [41908 41911])
                        ("15.4.7 Performance Criteria" anchor nil nil [41977 41980])
                        ("15.4.8 Scheduling Algorithms" anchor nil nil [42040 42043])
                        ("15.5 Concurrency" anchor nil nil [42116 42119])
                        ("15.5.1 Precedence Graphs" anchor nil nil [42166 42169])
                        ("15.5.2 Bernstein's Concurrency Conditions" anchor nil nil [42226 42229])
                        ("15.5.3 Parbegin/Parend" anchor nil nil [42303 42306])
                        ("15.5.4 Converting Precedence Graphs To Parbegin/End" anchor nil nil [42361 42364])
                        ("15.5.5 Producer/Consumer processes" anchor nil nil [42448 42451])
                        ("15.5.6 Race Conditions" anchor nil nil [42518 42521])
                        ("15.5.7 Critical Sections" anchor nil nil [42576 42579])
                        ("15.5.8 Semaphores - Definition, Use for Critical Sections and Events" anchor nil nil [42636 42639]))                      ) nil [3981 42830])
                    ("1" section (:members 
                      ( ("1.1" section (:members 
                          ( ("1.1.1" section nil nil [43292 43952])
                            ("1.1.2" section nil nil [43952 44832]))                          ) nil [43111 44832])
                        ("1.2" section (:members 
                          ( ("1.2.1" section nil nil [45013 45435])
                            ("1.2.2" section nil nil [45435 45729])
                            ("1.2.3" section nil nil [45729 45990])
                            ("1.2.4" section nil nil [45990 46423])
                            ("1.2.5" section nil nil [46423 47388])
                            ("1.2.6" section nil nil [47388 48531]))                          ) nil [44832 48531])
                        ("1.3" section (:members 
                          ( ("1.3.1" section nil nil [48710 50075])
                            ("1.3.2" section nil nil [50075 51289])
                            ("1.3.3" section nil nil [51289 52609])
                            ("1.3.4" section nil nil [52609 53083]))                          ) nil [48531 53083])
                        ("1.4" section (:members 
                          ( ("1.4.1" section nil nil [53289 53752])
                            ("1.4.2" section nil nil [53752 54207])
                            ("1.4.3" section nil nil [54207 54515])
                            ("1.4.4" section nil nil [54515 54767])
                            ("1.4.5" section nil nil [54767 55290])
                            ("1.4.6" section nil nil [55290 55801]))                          ) nil [53083 55801])
                        ("1.5" section (:members 
                          ( ("1.5.1" section nil nil [55978 57377])
                            ("1.5.2" section nil nil [57377 57607]))                          ) nil [55801 57607]))                      ) nil [42830 57607])
                    ("2" section (:members 
                      ( ("2.1" section (:members 
                          ( ("2.1.1" section nil nil [58076 59447])
                            ("2.1.2" section nil nil [59447 60314])
                            ("2.1.3" section nil nil [60314 60924]))                          ) nil [57873 60924])
                        ("2.2" section (:members 
                          ( ("2.2.1" section nil nil [61109 61803])
                            ("2.2.2" section nil nil [61803 63365])
                            ("2.2.3" section nil nil [63365 67580])
                            ("2.2.4" section nil nil [67580 68969])
                            ("2.2.5" section nil nil [68969 70169]))                          ) nil [60924 70169])
                        ("2.3" section (:members 
                          ( ("2.3.1" section nil nil [70359 71908])
                            ("2.3.2" section nil nil [71908 72754])
                            ("2.3.3" section nil nil [72754 75553])
                            ("2.3.4" section nil nil [75553 76685])
                            ("2.3.5" section nil nil [76685 77941]))                          ) nil [70169 77941]))                      ) nil [57607 77941])
                    ("3" section (:members 
                      ( ("3.1" section (:members 
                          ( ("3.1.1" section nil nil [78411 78796])
                            ("3.1.2" section nil nil [78796 79079])
                            ("3.1.3" section nil nil [79079 79462])
                            ("3.1.4" section nil nil [79462 79857])
                            ("3.1.5" section nil nil [79857 80251]))                          ) nil [78214 80251])
                        ("3.2" section (:members 
                          ( ("3.2.1" section nil nil [80433 80782])
                            ("3.2.2" section nil nil [80782 81249]))                          ) nil [80251 81249])
                        ("3.3" section (:members 
                          ( ("3.3.1" section nil nil [81457 81842])
                            ("3.3.2" section nil nil [81842 82988]))                          ) nil [81249 82988])
                        ("3.4" section (:members 
                          ( ("3.4.1" section nil nil [83168 84164]))                          ) nil [82988 84164])
                        ("3.5" section (:members 
                          ( ("3.5.1" section nil nil [84345 84745]))                          ) nil [84164 84745]))                      ) nil [77941 84745])
                    ("4" section (:members 
                      ( ("4.1" section nil nil [84959 85273])
                        ("4.2" section nil nil [85273 85546])
                        ("4.1" section (:members 
                          ( ("4.1.1" section nil nil [85734 86008])
                            ("4.1.2" section nil nil [86008 86284])
                            ("4.1.3" section nil nil [86284 86566]))                          ) nil [85546 86566])
                        ("4.2" section (:members 
                          ( ("4.2.1" section nil nil [86755 87025])
                            ("4.2.2" section nil nil [87025 87287])
                            ("4.2.3" section nil nil [87287 87555])
                            ("4.2.4" section nil nil [87555 88037])
                            ("4.2.5" section nil nil [88037 88740])
                            ("4.2.6" section nil nil [88740 89321]))                          ) nil [86566 89321]))                      ) nil [84745 89321])
                    ("5" section (:members 
                      ( ("5.1" section (:members 
                          ( ("5.1.1" section nil nil [89751 90442]))                          ) nil [89576 90442])
                        ("5.2" section (:members 
                          ( ("5.2.1" section nil nil [90617 91135])
                            ("5.2.2" section nil nil [91135 91791])
                            ("5.2.3" section nil nil [91791 92535])
                            ("5.2.4" section nil nil [92535 92724]))                          ) nil [90442 92724])
                        ("5.3" section (:members 
                          ( ("5.3.1" section nil nil [92910 93203])
                            ("5.3.2" section nil nil [93203 93560]))                          ) nil [92724 93560])
                        ("5.4" section (:members 
                          ( ("5.4.1" section nil nil [93754 94116])
                            ("5.4.2" section nil nil [94116 94597])
                            ("5.4.3" section nil nil [94597 94998])
                            ("5.4.4" section nil nil [94998 95461])
                            ("5.4.5" section nil nil [95461 95921]))                          ) nil [93560 95921]))                      ) nil [89321 95921])
                    ("6" section (:members 
                      ( ("6.1" section nil nil [96123 96677]))                      ) nil [95921 96677])
                    ("7" section (:members 
                      ( ("7.1" section (:members 
                          ( ("7.1.1" section nil nil [97033 97581]))                          ) nil [96846 97581])
                        ("7.2" section (:members 
                          ( ("7.2.1" section nil nil [97842 98625]))                          ) nil [97581 98625])
                        ("7.3" section (:members 
                          ( ("7.3.1" section nil nil [98935 99181])
                            ("7.3.2" section nil nil [99181 99449])
                            ("7.3.3" section nil nil [99449 99715])
                            ("7.3.4" section nil nil [99715 99967]))                          ) nil [98625 99967]))                      ) nil [96677 99967])
                    ("8" section (:members 
                      ( ("8.1" section nil nil [100151 100337])
                        ("8.2" section (:members 
                          ( ("8.2.1" section nil nil [100536 100880])
                            ("8.2.2" section nil nil [100880 101119])
                            ("8.2.3" section nil nil [101119 101561]))                          ) nil [100337 101561])
                        ("8.3" section (:members 
                          ( ("8.3.1" section nil nil [101761 102124]))                          ) nil [101561 102124])
                        ("8.4" section (:members 
                          ( ("8.4.1" section nil nil [102332 102543])
                            ("8.4.2" section nil nil [102543 102836])
                            ("8.4.3" section nil nil [102836 103081])
                            ("8.4.4" section nil nil [103081 103334])
                            ("8.4.5" section nil nil [103334 103826]))                          ) nil [102124 103826])
                        ("8.5" section (:members 
                          ( ("8.5.1" section nil nil [104015 104237])
                            ("8.5.2" section nil nil [104237 104548])
                            ("8.5.3" section nil nil [104548 105022])
                            ("8.5.4" section nil nil [105022 105349]))                          ) nil [103826 105349])
                        ("8.6" section (:members 
                          ( ("8.6.1" section nil nil [105540 105888])
                            ("8.6.2" section nil nil [105888 106214])
                            ("8.6.3" section nil nil [106214 106523])
                            ("8.6.4" section nil nil [106523 106806]))                          ) nil [105349 106806])
                        ("8.7" section (:members 
                          ( ("8.7.1" section nil nil [106993 107263])
                            ("8.7.2" section nil nil [107263 107580])
                            ("8.7.3" section nil nil [107580 107924])
                            ("8.7.4" section nil nil [107924 108246])
                            ("8.7.5" section nil nil [108246 108522]))                          ) nil [106806 108522]))                      ) nil [99967 108522])
                    ("9" section (:members 
                      ( ("9.1" section (:members 
                          ( ("9.1.1" section nil nil [108900 109136])
                            ("9.1.2" section nil nil [109136 109357])
                            ("9.1.3" section nil nil [109357 109619])
                            ("9.1.4" section nil nil [109619 109899])
                            ("9.1.5" section nil nil [109899 110291])
                            ("9.1.6" section nil nil [110291 110673])
                            ("9.1.7" section nil nil [110673 110933])
                            ("9.1.8" section nil nil [110933 111160])
                            ("9.1.9" section nil nil [111160 111396])
                            ("9.1.10" section nil nil [111396 111631])
                            ("9.1.11" section nil nil [111631 111861])
                            ("9.1.12" section nil nil [111861 112388]))                          ) nil [108699 112388])
                        ("9.2" section nil nil [112388 112635]))                      ) nil [108522 112635])
                    ("10" section (:members 
                      ( ("10.1" section (:members 
                          ( ("10.1.1" section nil nil [113025 113253])
                            ("10.1.2" section nil nil [113253 113483])
                            ("10.1.3" section nil nil [113483 113731])
                            ("10.1.4" section nil nil [113731 113982]))                          ) nil [112817 113982]))                      ) nil [112635 113982])
                    ("11" section (:members 
                      ( ("11.1" section (:members 
                          ( ("11.1.1" section nil nil [114350 115078]))                          ) nil [114164 115078])
                        ("11.2" section (:members 
                          ( ("11.2.1" section nil nil [115267 115956]))                          ) nil [115078 115956])
                        ("11.3" section (:members 
                          ( ("11.3.1" section nil nil [116141 116650]))                          ) nil [115956 116650]))                      ) nil [113982 116650])
                    ("12" section (:members 
                      ( ("12.1" section (:members 
                          ( ("12.1.1" section nil nil [117018 117531]))                          ) nil [116833 117531])
                        ("12.2" section (:members 
                          ( ("12.2.1" section nil nil [117720 118141]))                          ) nil [117531 118141])
                        ("12.3" section (:members 
                          ( ("12.3.1" section nil nil [118326 118637])
                            ("12.3.2" section nil nil [118637 119086])
                            ("12.3.3" section nil nil [119086 122052]))                          ) nil [118141 122052]))                      ) nil [116650 122052])
                    ("13" section (:members 
                      ( ("13.1" section (:members 
                          ( ("13.1.1" section nil nil [122419 122816]))                          ) nil [122236 122816])
                        ("13.2" section (:members 
                          ( ("13.2.1" section nil nil [123000 123932]))                          ) nil [122816 123932])
                        ("13.3" section (:members 
                          ( ("13.3.1" section nil nil [124130 124992]))                          ) nil [123932 124992])
                        ("13.4" section (:members 
                          ( ("13.4.1" section nil nil [125191 126290])
                            ("13.4.2" section nil nil [126290 127237]))                          ) nil [124992 127237])
                        ("13.5" section (:members 
                          ( ("13.5.1" section nil nil [127443 128122])
                            ("13.5.2" section nil nil [128122 128790])
                            ("13.5.3" section nil nil [128790 129041])
                            ("13.5.4" section nil nil [129041 129869])
                            ("13.5.5" section nil nil [129869 130643])
                            ("13.5.6" section nil nil [130643 131256])
                            ("13.5.7" section nil nil [131256 131846]))                          ) nil [127237 131846])
                        ("13.6" section (:members 
                          ( ("13.6.1" section nil nil [132049 132697])
                            ("13.6.2" section nil nil [132697 133207])
                            ("13.6.3" section nil nil [133207 133988])
                            ("13.6.4" section nil nil [133988 134646]))                          ) nil [131846 134646])
                        ("13.7" section (:members 
                          ( ("13.7.1" section nil nil [134869 135397])
                            ("13.7.2" section nil nil [135397 136066])
                            ("13.7.3" section nil nil [136066 136979])
                            ("13.7.4" section nil nil [136979 137667]))                          ) nil [134646 137667])
                        ("13.8" section (:members 
                          ( ("13.8.1" section nil nil [137867 139113])
                            ("13.8.2" section nil nil [139113 140974])
                            ("13.8.3" section nil nil [140974 141881])
                            ("13.8.4" section nil nil [141881 142466]))                          ) nil [137667 142466])
                        ("13.9" section (:members 
                          ( ("13.9.1" section nil nil [142679 143311]))                          ) nil [142466 143311]))                      ) nil [122052 143311])
                    ("14" section (:members 
                      ( ("14.1" section (:members 
                          ( ("14.1.1" section nil nil [143689 144209]))                          ) nil [143499 144209])
                        ("14.2" section (:members 
                          ( ("14.2.1" section nil nil [144409 144850])
                            ("14.2.2" section nil nil [144850 145966]))                          ) nil [144209 145966])
                        ("14.3" section (:members 
                          ( ("14.3.1" section nil nil [146202 146808]))                          ) nil [145966 146808])
                        ("14.4" section (:members 
                          ( ("14.4.1" section nil nil [146995 147438]))                          ) nil [146808 147438]))                      ) nil [143311 147438])
                    ("15" section (:members 
                      ( ("15.1" section (:members 
                          ( ("15.1.1" section nil nil [147823 148550])
                            ("15.1.2" section nil nil [148550 149223])
                            ("15.1.3" section nil nil [149223 150650])
                            ("15.1.4" section nil nil [150650 151719])
                            ("15.1.5" section nil nil [151719 152370])
                            ("15.1.6" section nil nil [152370 153787]))                          ) nil [147632 153787])
                        ("15.2" section (:members 
                          ( ("15.2.1" section nil nil [153987 154995])
                            ("15.2.2" section nil nil [154995 156319])
                            ("15.2.3" section nil nil [156319 156921])
                            ("15.2.4" section nil nil [156921 158336]))                          ) nil [153787 158336])
                        ("15.3" section (:members 
                          ( ("15.3.1" section nil nil [158520 158951])
                            ("15.3.2" section nil nil [158951 159709])
                            ("15.3.3" section nil nil [159709 162893]))                          ) nil [158336 162893])
                        ("15.4" section (:members 
                          ( ("15.4.1" section nil nil [163082 164322])
                            ("15.4.2" section nil nil [164322 166157])
                            ("15.4.3" section nil nil [166157 166819])
                            ("15.4.4" section nil nil [166819 168263])
                            ("15.4.5" section nil nil [168263 168738])
                            ("15.4.6" section nil nil [168738 169648])
                            ("15.4.7" section nil nil [169648 172591])
                            ("15.4.8" section nil nil [172591 177427]))                          ) nil [162893 177427])
                        ("15.5" section (:members 
                          ( ("15.5.1" section nil nil [177613 178594])
                            ("15.5.2" section nil nil [178594 179037])
                            ("15.5.3" section nil nil [179037 179921])
                            ("15.5.4" section nil nil [179921 180153])
                            ("15.5.5" section nil nil [180153 182142])
                            ("15.5.6" section nil nil [182142 183590])
                            ("15.5.7" section nil nil [183590 186783])
                            ("15.5.8" section (:members 
                              ( ("Org" anchor nil nil [189067 189070])
                                ("Emacs" anchor nil nil [189124 189127])
                                ("Validate XHTML 1.0" anchor nil nil [189194 189197]))                              ) nil [186783 189293]))                          ) nil [177427 189293]))                      ) nil [147438 189293]))                  ) nil [3923 189293]))              ) nil [3867 189293]))          
    :file "OS2.html"
    :pointmax 189293
    :fsize 189479
    :lastmodtime '(20918 46863 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "History.html"
    :major-mode 'html-mode
    :tags 
        '( ("History" section nil nil [245 2265])
            ("/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2013 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = \"code-highlighted\";
     elem.className   = \"code-highlighted\";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->" section nil nil [2265 3885])
            ("History" section (:members 
              ( ("History" section (:members 
                  ( ("Table of Contents" section (:members 
                      ( ("1 Schedule" anchor nil nil [4073 4076])
                        ("1.1 Week 1" anchor nil nil [4114 4117])
                        ("1.1.1 4/2: Introduction" anchor nil nil [4157 4160])
                        ("1.1.2 4/4: How the World was Made: Native California" anchor nil nil [4215 4218])
                        ("1.2 Week 2" anchor nil nil [4314 4317])
                        ("1.2.1 4/9: Island of Women: Spanish Colonization" anchor nil nil [4357 4360])
                        ("1.2.2 4/11: Three Republics: Alta California's International Frontier" anchor nil nil [4440 4443])
                        ("1.3 Week 3" anchor nil nil [4556 4559])
                        ("1.3.1 4/16: The Wondrous Influence of Gold: The Gold Rush" anchor nil nil [4599 4602])
                        ("1.3.2 4/18: We Desire Only a White Population: Statehood, Race and the Law" anchor nil nil [4691 4694])
                        ("1.4 Week 4" anchor nil nil [4812 4815])
                        ("1.4.1 4/23: Great Lords of the Soil: The Politics of Property" anchor nil nil [4855 4858])
                        ("1.4.2 4/25: California on Two Dollars a Day: A Social History of Gilded Age California" anchor nil nil [4951 4954])
                        ("1.5 Week 5" anchor nil nil [5084 5087])
                        ("1.5.1 4/30: Land of Orange Groves and Jails: Politics at the Turn of the Century" anchor nil nil [5127 5130])
                        ("1.5.2 5/2: Midterm Exam" anchor nil nil [5242 5245])
                        ("1.6 Week 6" anchor nil nil [5312 5315])
                        ("1.6.1 5/7: Everything is Extraordinary: The 20th Century Begins in Southern California" anchor nil nil [5355 5358])
                        ("1.6.2 5/9: A Failure That Topples All Success: The Great Depression" anchor nil nil [5476 5479])
                        ("1.7 Week 7" anchor nil nil [5590 5593])
                        ("1.7.1 5/14: The Second Gold Rush: World War Two" anchor nil nil [5633 5636])
                        ("1.7.2 5/16: Fighting for a Glorious Future: Postwar Possibilities" anchor nil nil [5715 5718])
                        ("1.8 Week 8" anchor nil nil [5827 5830])
                        ("1.8.1 5/21: Tommorowland: Atomic Age California" anchor nil nil [5870 5873])
                        ("1.8.2 5/23: At the Gates of San Leandro: Cities and Suburbs" anchor nil nil [5952 5955])
                        ("1.9 Week 9" anchor nil nil [6058 6061])
                        ("1.9.1 5/28: Riot on the Sunset Strip: Youth in a Revolutionary Age" anchor nil nil [6101 6104])
                        ("1.9.2 5/30: Revolt of the Haves: The Conservative Triumph" anchor nil nil [6202 6205])
                        ("1.10 Week 10" anchor nil nil [6306 6309])
                        ("1.10.1 6/4: Imagining Disaster: End of the Century California" anchor nil nil [6352 6355])
                        ("1.10.2 6/6: Conclusion" anchor nil nil [6449 6452])
                        ("1.11 Final Exam" anchor nil nil [6519 6522])
                        ("2 Notes" anchor nil nil [6580 6583])
                        ("2.1 Lecture" anchor nil nil [6618 6621])
                        ("2.1.1 May 14th:" anchor nil nil [6662 6665])
                        ("2.1.2 May 16th" anchor nil nil [6712 6715])
                        ("2.1.3 May 21st" anchor nil nil [6761 6764])
                        ("2.1.4 May 28th" anchor nil nil [6810 6813])
                        ("2.1.5 May 30th" anchor nil nil [6859 6862])
                        ("2.1.6 June 4th" anchor nil nil [6908 6911])
                        ("2.1.7 June 6th" anchor nil nil [6957 6960])
                        ("2.2 Reading" anchor nil nil [7018 7021])
                        ("2.2.1 Week 6 - pp. 245-253" anchor nil nil [7062 7065])
                        ("2.2.2 Week 6 - pp. 288-296" anchor nil nil [7123 7126])
                        ("2.2.3 Week 6 - Brilliant, Introduction" anchor nil nil [7184 7187])
                        ("2.2.4 Week 7 - Brilliant, Chapters 1-2, pp. 15-57" anchor nil nil [7257 7260])
                        ("2.2.5 Week 8 - Brilliant, Chapter 5" anchor nil nil [7341 7344])
                        ("2.2.6 Week 9 - Brilliant, Chapter 6" anchor nil nil [7411 7414])
                        ("2.2.7 Week 9 - Brilliant, Chapter 7" anchor nil nil [7481 7484])
                        ("2.2.8 Week 10 - Brilliant - Chapter 8" anchor nil nil [7551 7554])
                        ("3 Need green book, Tuesday Final, Same Time" anchor nil nil [7646 7649]))                      ) nil [4003 7786])
                    ("1" section (:members 
                      ( ("1.1" section (:members 
                          ( ("1.1.1" section nil nil [8134 8335])
                            ("1.1.2" section nil nil [8335 8851]))                          ) nil [7957 8851])
                        ("1.2" section (:members 
                          ( ("1.2.1" section nil nil [9028 9609])
                            ("1.2.2" section nil nil [9609 10410]))                          ) nil [8851 10410])
                        ("1.3" section (:members 
                          ( ("1.3.1" section nil nil [10587 11084])
                            ("1.3.2" section nil nil [11084 11637]))                          ) nil [10410 11637])
                        ("1.4" section (:members 
                          ( ("1.4.1" section nil nil [11814 12324])
                            ("1.4.2" section nil nil [12324 13124]))                          ) nil [11637 13124])
                        ("1.5" section (:members 
                          ( ("1.5.1" section nil nil [13301 13846])
                            ("1.5.2" section nil nil [13846 14052]))                          ) nil [13124 14052])
                        ("1.6" section (:members 
                          ( ("1.6.1" section nil nil [14229 14743])
                            ("1.6.2" section nil nil [14743 15511]))                          ) nil [14052 15511])
                        ("1.7" section (:members 
                          ( ("1.7.1" section nil nil [15688 16327])
                            ("1.7.2" section nil nil [16327 16809]))                          ) nil [15511 16809])
                        ("1.8" section (:members 
                          ( ("1.8.1" section nil nil [16986 17211])
                            ("1.8.2" section nil nil [17211 17574]))                          ) nil [16809 17574])
                        ("1.9" section (:members 
                          ( ("1.9.1" section nil nil [17751 18247])
                            ("1.9.2" section nil nil [18247 18622]))                          ) nil [17574 18622])
                        ("1.10" section (:members 
                          ( ("1.10.1" section nil nil [18804 19227])
                            ("1.10.2" section nil nil [19227 19435]))                          ) nil [18622 19435])
                        ("1.11" section nil nil [19435 19629]))                      ) nil [7786 19629])
                    ("2" section (:members 
                      ( ("2.1" section (:members 
                          ( ("2.1.1" section nil nil [19975 32195])
                            ("2.1.2" section nil nil [32195 37645])
                            ("2.1.3" section nil nil [37645 42242])
                            ("2.1.4" section nil nil [42242 46516])
                            ("2.1.5" section nil nil [46516 49347])
                            ("2.1.6" section nil nil [49347 51210])
                            ("2.1.7" section nil nil [51210 51807]))                          ) nil [19797 51807])
                        ("2.2" section (:members 
                          ( ("2.2.1" section nil nil [51985 54501])
                            ("2.2.2" section nil nil [54501 56571])
                            ("2.2.3" section nil nil [56571 57011])
                            ("2.2.4" section nil nil [57011 60016])
                            ("2.2.5" section nil nil [60016 61608])
                            ("2.2.6" section nil nil [61608 65264])
                            ("2.2.7" section nil nil [65264 67346])
                            ("2.2.8" section nil nil [67346 69492]))                          ) nil [51807 69492]))                      ) nil [19629 69492])
                    ("3" section (:members 
                      ( ("Org" anchor nil nil [69825 69828])
                        ("Emacs" anchor nil nil [69882 69885])
                        ("Validate XHTML 1.0" anchor nil nil [69952 69955]))                      ) nil [69492 70051]))                  ) nil [3941 70051]))              ) nil [3885 70051]))          
    :file "History.html"
    :pointmax 70051
    :fsize 70050
    :lastmodtime '(20919 20486 0 0)
    :unmatched-syntax 'nil
    )
   )
  :file "!Users!james!Dropbox!ORG!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2"
  )
